////
////  YLSQLite.h
////  YALO
////
////  Created by qhcthanh on 7/29/16.
////  Copyright Â© 2016 admin. All rights reserved.
////
//
//#import <Foundation/Foundation.h>
//#import "YLResultSet.h"
//#import <sqlite3.h>
//
//typedef int(^FMDBExecuteStatementsCallbackBlock)(NSDictionary *resultsDictionary);
//
//@interface YLSQLite : NSObject
//
///** Initialize a `FMDatabase` object.
// 
// An `YLSQLite` is created with a path to a SQLite database file.  This path can be one of these three:
// 
// 1. A file system path.  The file does not have to exist on disk.  If it does not exist, it is created for you.
// 2. An empty string (`@""`).  An empty database is created at a temporary location.  This database is deleted with the `FMDatabase` connection is closed.
// 3. `nil`.  An in-memory database is created.  This database will be destroyed with the `FMDatabase` connection is closed.
// 
// For example:
// NSString *docsPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0];
// NSString *dbPath   = [docsPath stringByAppendingPathComponent:@"test.db"];
// FMDatabase *db     = [FMDatabase databaseWithPath:dbPath];
// 
// @param inPath Path of database file
// 
// @return `YLSQLite` object if successful; `nil` if failure.
// */
//- (instancetype)initWithPath:(NSString*)inPath;
//
///** Opening a new database connection
// The database is opened for reading and writing, and is created if it does not already exist.
// @return `YES` if successful, `NO` on error.
// */
//- (BOOL)open;
//
///** Closing a database connection
// @return `YES` if success, `NO` on error.
// */
//- (BOOL)close;
//
///** Execute multiple SQL statements with callback handler
// 
// This executes a series of SQL statements that are combined in a single string (e.g. the SQL generated by the `sqlite3` command line `.dump` command). This accepts no value parameters, but rather simply expects a single string with multiple SQL statements, each terminated with a semicolon. This uses `sqlite3_exec`.
// 
// @param sql       The SQL to be performed.
// @param block     A block that will be called for any result sets returned by any SQL statements.
// Note, if you supply this block, it must return integer value, zero upon success (this would be a good opportunity to use SQLITE_OK),
// non-zero value upon failure (which will stop the bulk execution of the SQL).  If a statement returns values, the block will be called with the results from the query in NSDictionary *resultsDictionary.
// This may be `nil` if you don't care to receive any results.
// 
// @return          `YES` upon success; `NO` upon failure. If failed, you can call `<lastError>`,
// `<lastErrorCode>`, or `<lastErrorMessage>` for diagnostic information regarding the failure.
// */
//- (BOOL)executeStatements:(NSString *)sql withResultBlock:(FMDBExecuteStatementsCallbackBlock)block;
//
//
///** Execute select statement
//
// Executing queries returns an `<FMResultSet>` object if successful, and `nil` upon failure.  Like executing updates, there is a variant that accepts an `NSError **` parameter.  Otherwise you should use the `<lastErrorMessage>` and `<lastErrorMessage>` methods to determine why a query failed.
// In order to iterate through the results of your query, you use a `while()` loop.  You also need to "step" (via `<[FMResultSet next]>`) from one record to the other.
//
// @param sql The SELECT statement to be performed, with optional `?` placeholders.
// @param ... Optional parameters to bind to `?` placeholders in the SQL statement. These should be Objective-C objects (e.g. `NSString`, `NSNumber`, etc.), not fundamental C data types (e.g. `int`, `char *`, etc.).
// 
// @return A `<FMResultSet>` for the result set upon success; `nil` upon failure. If failed, you can call `<lastError>`, `<lastErrorCode>`, or `<lastErrorMessage>` for diagnostic information regarding the failure.
// 
// @see FMResultSet
// @see [`FMResultSet next`](<[FMResultSet next]>)
// @see [`sqlite3_bind`](http://sqlite.org/c3ref/bind_blob.html)
// 
// @note If you want to use this from Swift, please note that you must include `FMDatabaseVariadic.swift` in your project. Without that, you cannot use this method directly, and instead have to use methods such as `<executeQuery:withArgumentsInArray:>`.
// */
////- (YLResultSet *)executeQuery:(NSString*)sql;
//
//
//
//
//@end
//
//
//
//
//
//
//
//
